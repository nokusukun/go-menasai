// Generated by https://quicktype.io
package main

type RedditResponse struct {
	Kind string            `json:"kind"`
	Data RedditListingData `json:"data"`
}

type RedditListingData struct {
	Modhash  string      `json:"modhash"`
	Dist     int64       `json:"dist"`
	Children []Child     `json:"children"`
	After    string      `json:"after"`
	Before   interface{} `json:"before"`
}

type Child struct {
	Kind Kind      `json:"kind"`
	Data ChildData `json:"data"`
}

type ChildData struct {
	ApprovedAtUTC              interface{}              `json:"approved_at_utc"`
	Subreddit                  string                   `json:"subreddit"`
	Selftext                   string                   `json:"selftext"`
	AuthorFullname             string                   `json:"author_fullname"`
	Saved                      bool                     `json:"saved"`
	ModReasonTitle             interface{}              `json:"mod_reason_title"`
	Gilded                     int64                    `json:"gilded"`
	Clicked                    bool                     `json:"clicked"`
	Title                      string                   `json:"title"`
	LinkFlairRichtext          []LinkFlairRichtext      `json:"link_flair_richtext"`
	SubredditNamePrefixed      string                   `json:"subreddit_name_prefixed"`
	Hidden                     bool                     `json:"hidden"`
	Pwls                       int64                    `json:"pwls"`
	LinkFlairCSSClass          *string                  `json:"link_flair_css_class"`
	Downs                      int64                    `json:"downs"`
	ThumbnailHeight            *int64                   `json:"thumbnail_height"`
	HideScore                  bool                     `json:"hide_score"`
	Name                       string                   `json:"name"`
	Quarantine                 bool                     `json:"quarantine"`
	LinkFlairTextColor         FlairTextColor           `json:"link_flair_text_color"`
	AuthorFlairBackgroundColor *string                  `json:"author_flair_background_color"`
	SubredditType              SubredditType            `json:"subreddit_type"`
	UPS                        int64                    `json:"ups"`
	TotalAwardsReceived        int64                    `json:"total_awards_received"`
	MediaEmbed                 MediaEmbed               `json:"media_embed"`
	ThumbnailWidth             *int64                   `json:"thumbnail_width"`
	AuthorFlairTemplateID      *string                  `json:"author_flair_template_id"`
	IsOriginalContent          bool                     `json:"is_original_content"`
	UserReports                []interface{}            `json:"user_reports"`
	SecureMedia                *Media                   `json:"secure_media"`
	IsRedditMediaDomain        bool                     `json:"is_reddit_media_domain"`
	IsMeta                     bool                     `json:"is_meta"`
	Category                   interface{}              `json:"category"`
	SecureMediaEmbed           MediaEmbed               `json:"secure_media_embed"`
	LinkFlairText              *string                  `json:"link_flair_text"`
	CanModPost                 bool                     `json:"can_mod_post"`
	Score                      int64                    `json:"score"`
	ApprovedBy                 interface{}              `json:"approved_by"`
	Thumbnail                  string                   `json:"thumbnail"`
	Edited                     *Edited                  `json:"edited"`
	AuthorFlairCSSClass        *string                  `json:"author_flair_css_class"`
	AuthorFlairRichtext        []AuthorFlairRichtext    `json:"author_flair_richtext"`
	Gildings                   Gildings                 `json:"gildings"`
	PostHint                   *string                  `json:"post_hint,omitempty"`
	ContentCategories          []string                 `json:"content_categories"`
	IsSelf                     bool                     `json:"is_self"`
	ModNote                    interface{}              `json:"mod_note"`
	Created                    float64                  `json:"created"`
	LinkFlairType              AuthorFlairType          `json:"link_flair_type"`
	Wls                        int64                    `json:"wls"`
	BannedBy                   interface{}              `json:"banned_by"`
	AuthorFlairType            AuthorFlairType          `json:"author_flair_type"`
	Domain                     string                   `json:"domain"`
	SelftextHTML               *string                  `json:"selftext_html"`
	Likes                      interface{}              `json:"likes"`
	SuggestedSort              *string                  `json:"suggested_sort"`
	BannedAtUTC                interface{}              `json:"banned_at_utc"`
	ViewCount                  interface{}              `json:"view_count"`
	Archived                   bool                     `json:"archived"`
	NoFollow                   bool                     `json:"no_follow"`
	IsCrosspostable            bool                     `json:"is_crosspostable"`
	Pinned                     bool                     `json:"pinned"`
	Over18                     bool                     `json:"over_18"`
	Preview                    *Preview                 `json:"preview,omitempty"`
	AllAwardings               []AllAwarding            `json:"all_awardings"`
	MediaOnly                  bool                     `json:"media_only"`
	LinkFlairTemplateID        *string                  `json:"link_flair_template_id,omitempty"`
	CanGild                    bool                     `json:"can_gild"`
	Spoiler                    bool                     `json:"spoiler"`
	Locked                     bool                     `json:"locked"`
	AuthorFlairText            *string                  `json:"author_flair_text"`
	Visited                    bool                     `json:"visited"`
	NumReports                 interface{}              `json:"num_reports"`
	Distinguished              interface{}              `json:"distinguished"`
	SubredditID                string                   `json:"subreddit_id"`
	ModReasonBy                interface{}              `json:"mod_reason_by"`
	RemovalReason              interface{}              `json:"removal_reason"`
	LinkFlairBackgroundColor   LinkFlairBackgroundColor `json:"link_flair_background_color"`
	ID                         string                   `json:"id"`
	IsRobotIndexable           bool                     `json:"is_robot_indexable"`
	ReportReasons              interface{}              `json:"report_reasons"`
	Author                     string                   `json:"author"`
	NumCrossposts              int64                    `json:"num_crossposts"`
	NumComments                int64                    `json:"num_comments"`
	SendReplies                bool                     `json:"send_replies"`
	WhitelistStatus            WhitelistStatus          `json:"whitelist_status"`
	ContestMode                bool                     `json:"contest_mode"`
	ModReports                 []interface{}            `json:"mod_reports"`
	AuthorPatreonFlair         bool                     `json:"author_patreon_flair"`
	AuthorFlairTextColor       *FlairTextColor          `json:"author_flair_text_color"`
	Permalink                  string                   `json:"permalink"`
	ParentWhitelistStatus      WhitelistStatus          `json:"parent_whitelist_status"`
	Stickied                   bool                     `json:"stickied"`
	URL                        string                   `json:"url"`
	SubredditSubscribers       int64                    `json:"subreddit_subscribers"`
	CreatedUTC                 float64                  `json:"created_utc"`
	Media                      *Media                   `json:"media"`
	IsVideo                    bool                     `json:"is_video"`
	EventStart                 *float64                 `json:"event_start,omitempty"`
	Collections                []Collection             `json:"collections"`
	MediaMetadata              *MediaMetadata           `json:"media_metadata,omitempty"`
	EventEnd                   *float64                 `json:"event_end,omitempty"`
	EventIsLive                *bool                    `json:"event_is_live,omitempty"`
}

type AllAwarding struct {
	IsEnabled           bool          `json:"is_enabled"`
	Count               int64         `json:"count"`
	SubredditID         *string       `json:"subreddit_id"`
	Description         *Description  `json:"description"`
	CoinReward          int64         `json:"coin_reward"`
	IconWidth           int64         `json:"icon_width"`
	IconURL             string        `json:"icon_url"`
	DaysOfPremium       int64         `json:"days_of_premium"`
	IconHeight          int64         `json:"icon_height"`
	ResizedIcons        []ResizedIcon `json:"resized_icons"`
	DaysOfDripExtension int64         `json:"days_of_drip_extension"`
	AwardType           AwardType     `json:"award_type"`
	CoinPrice           int64         `json:"coin_price"`
	ID                  ID            `json:"id"`
	Name                Name          `json:"name"`
}

type ResizedIcon struct {
	URL    string `json:"url"`
	Width  int64  `json:"width"`
	Height int64  `json:"height"`
}

type AuthorFlairRichtext struct {
	A *string `json:"a,omitempty"`
	E string  `json:"e"`
	U *string `json:"u,omitempty"`
	T *string `json:"t,omitempty"`
}

type Collection struct {
	Permalink     string      `json:"permalink"`
	LinkIDS       []string    `json:"link_ids"`
	Description   string      `json:"description"`
	Title         string      `json:"title"`
	CreatedAtUTC  float64     `json:"created_at_utc"`
	SubredditID   string      `json:"subreddit_id"`
	AuthorName    string      `json:"author_name"`
	SrDetail      SrDetail    `json:"sr_detail"`
	CollectionID  string      `json:"collection_id"`
	AuthorID      string      `json:"author_id"`
	LastUpdateUTC float64     `json:"last_update_utc"`
	DisplayLayout interface{} `json:"display_layout"`
}

type SrDetail struct {
	IconImg               string          `json:"icon_img"`
	BannerImg             string          `json:"banner_img"`
	Name                  string          `json:"name"`
	Title                 string          `json:"title"`
	URL                   string          `json:"url"`
	Sr                    string          `json:"sr"`
	SrDisplayNamePrefixed string          `json:"sr_display_name_prefixed"`
	UserCanCrosspost      interface{}     `json:"user_can_crosspost"`
	SubredditType         SubredditType   `json:"subreddit_type"`
	BannerSize            []int64         `json:"banner_size"`
	ModPermissions        []interface{}   `json:"mod_permissions"`
	Over18                bool            `json:"over_18"`
	Subscribers           int64           `json:"subscribers"`
	CommunityIcon         string          `json:"community_icon"`
	IconSize              []int64         `json:"icon_size"`
	KeyColor              string          `json:"key_color"`
	PrimaryColor          string          `json:"primary_color"`
	WhitelistStatus       WhitelistStatus `json:"whitelist_status"`
}

type Gildings struct {
	Gid1 *int64 `json:"gid_1,omitempty"`
	Gid2 *int64 `json:"gid_2,omitempty"`
	Gid3 *int64 `json:"gid_3,omitempty"`
}

type LinkFlairRichtext struct {
	E AuthorFlairType `json:"e"`
	T string          `json:"t"`
}

type Media struct {
	Type        *string      `json:"type,omitempty"`
	Oembed      *Oembed      `json:"oembed,omitempty"`
	RedditVideo *RedditVideo `json:"reddit_video,omitempty"`
}

type Oembed struct {
	ProviderURL     string `json:"provider_url"`
	Description     string `json:"description"`
	Title           string `json:"title"`
	Type            string `json:"type"`
	ThumbnailWidth  int64  `json:"thumbnail_width"`
	Height          int64  `json:"height"`
	Width           int64  `json:"width"`
	HTML            string `json:"html"`
	Version         string `json:"version"`
	ProviderName    string `json:"provider_name"`
	ThumbnailURL    string `json:"thumbnail_url"`
	ThumbnailHeight int64  `json:"thumbnail_height"`
}

type RedditVideo struct {
	FallbackURL       string `json:"fallback_url"`
	Height            int64  `json:"height"`
	Width             int64  `json:"width"`
	ScrubberMediaURL  string `json:"scrubber_media_url"`
	DashURL           string `json:"dash_url"`
	Duration          int64  `json:"duration"`
	HLSURL            string `json:"hls_url"`
	IsGIF             bool   `json:"is_gif"`
	TranscodingStatus string `json:"transcoding_status"`
}

type MediaEmbed struct {
	Content        *string `json:"content,omitempty"`
	Width          *int64  `json:"width,omitempty"`
	Scrolling      *bool   `json:"scrolling,omitempty"`
	Height         *int64  `json:"height,omitempty"`
	MediaDomainURL *string `json:"media_domain_url,omitempty"`
}

type MediaMetadata struct {
	Aka5345Yv7Z21 Aka5345Yv7Z21 `json:"aka5345yv7z21"`
}

type Aka5345Yv7Z21 struct {
	Status string `json:"status"`
	E      string `json:"e"`
	S      S      `json:"s"`
	M      string `json:"m"`
	ID     string `json:"id"`
}

type S struct {
	Y int64  `json:"y"`
	X int64  `json:"x"`
	U string `json:"u"`
}

type Preview struct {
	Images             []Image      `json:"images"`
	Enabled            bool         `json:"enabled"`
	RedditVideoPreview *RedditVideo `json:"reddit_video_preview,omitempty"`
}

type Image struct {
	Source      ResizedIcon   `json:"source"`
	Resolutions []ResizedIcon `json:"resolutions"`
	Variants    Variants      `json:"variants"`
	ID          string        `json:"id"`
}

type Variants struct {
	Obfuscated *GIF `json:"obfuscated,omitempty"`
	GIF        *GIF `json:"gif,omitempty"`
	Mp4        *GIF `json:"mp4,omitempty"`
}

type GIF struct {
	Source      ResizedIcon   `json:"source"`
	Resolutions []ResizedIcon `json:"resolutions"`
}

type AwardType string

const (
	Community AwardType = "community"
	Global    AwardType = "global"
)

type Description string

const (
	GoldAward     Description = "Gold Award"
	PlatinumAward Description = "Platinum Award"
	SilverAward   Description = "Silver Award"
)

type ID string

const (
	Award04Fac4524E2342Bb8C40F48347357Ca1 ID = "award_04fac452-4e23-42bb-8c40-f48347357ca1"
	AwardFf6E7628891A483E8D2EEfd9193F3715 ID = "award_ff6e7628-891a-483e-8d2e-efd9193f3715"
	Gid1                                  ID = "gid_1"
	Gid2                                  ID = "gid_2"
	Gid3                                  ID = "gid_3"
)

type Name string

const (
	Gold      Name = "Gold"
	Greenseer Name = "Greenseer"
	LemonCake Name = "Lemon Cake"
	Platinum  Name = "Platinum"
	Silver    Name = "Silver"
)

type FlairTextColor string

const (
	Dark  FlairTextColor = "dark"
	Light FlairTextColor = "light"
)

type AuthorFlairType string

const (
	Richtext AuthorFlairType = "richtext"
	Text     AuthorFlairType = "text"
)

type SubredditType string

const (
	Public SubredditType = "public"
)

type WhitelistStatus string

const (
	AllAds WhitelistStatus = "all_ads"
)

type LinkFlairBackgroundColor string

const (
	B8001F LinkFlairBackgroundColor = "#b8001f"
	Dadada LinkFlairBackgroundColor = "#dadada"
	Edeff1 LinkFlairBackgroundColor = "#edeff1"
	Empty  LinkFlairBackgroundColor = ""
)

type Kind string

const (
	T3 Kind = "t3"
)

type Edited struct {
	Bool   *bool
	Double *float64
}
