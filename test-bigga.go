package main

import (
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	logger "log"
	"os"
	"time"

	gomenasai "gitlab.com/nokusukun/go-menasai/manager"

	jsoniter "github.com/json-iterator/go"
)

var (
	BenchmarkStats []string
	RGBFront       = "38"
	RGBBack        = "48"
	RGBReset       = "\033[0m"
	logLevel       int
	log            *logger.Logger
	json           = jsoniter.ConfigCompatibleWithStandardLibrary
	manager        *gomenasai.Gomenasai
)

// Generated by https://quicktype.io

type Imdb struct {
	Nconst            string `json:"nconst"`
	PrimaryName       string `json:"primaryName"`
	BirthYear         string `json:"birthYear"`
	DeathYear         string `json:"deathYear"`
	PrimaryProfession string `json:"primaryProfession"`
	KnownForTitles    string `json:"knownForTitles"`
}

func init() {
	flag.IntVar(&logLevel, "l", 5, "Log level")
	flag.Parse()
	var trace io.Writer
	if logLevel == 0 {
		trace = ioutil.Discard
	} else {
		trace = os.Stdout
	}
	log = logger.New(trace, "", 0)
}

func col(r, g, b int, t string) string {
	return fmt.Sprintf("\033[%v;2;%v;%v;%vm", t, r, g, b)
}

func benchmark(prefix string, target func()) {
	start := time.Now()
	target()
	end := time.Now()
	stat := fmt.Sprintf("\033[31;1;1m[Benchmark]%-20v:\033[0m %v\n", prefix, end.Sub(start))
	BenchmarkStats = append(BenchmarkStats, stat)
}

func printBenchmarkStats() {
	fmt.Println(col(123, 123, 200, RGBFront), "Benchmark Stats", RGBReset)
	for _, i := range BenchmarkStats {
		fmt.Print("ðŸ•’", i)
	}
}

func main() {

	benchmark("Load database", func() {
		var err error
		manager, err = gomenasai.Load("Imdb")
		if err != nil {
			panic(err)
		}
	})

	fmt.Println("Sleeping for 30 seconds before searching.")
	time.Sleep(time.Second * 30)

	benchmark("Search Adele", func() {
		result := manager.Search("adele")
		for _, doc := range result.Documents {
			fmt.Printf("Document: %v\n", doc.ExportI())
		}
	})

	fmt.Println("Sleeping for 60 seconds before again.")
	time.Sleep(time.Second * 60)

	benchmark("Search Jergens", func() {
		result := manager.Search("jergens")
		for _, doc := range result.Documents {
			fmt.Printf("Document: %v\n", doc.ExportI())
		}
	})

	benchmark("Search Adele Jergens", func() {
		result := manager.Search("adele jergens")
		for _, doc := range result.Documents {
			fmt.Printf("Document: %v\n", doc.ExportI())
		}
	})

	benchmark("Search Adele Smith", func() {
		result := manager.Search("adele smith")
		for _, doc := range result.Documents {
			fmt.Printf("Document: %v\n", doc.ExportI())
		}
	})

	printBenchmarkStats()

}

func main2() {
	// manager := chunk.ChunkManager{}
	manager, err := gomenasai.New(&gomenasai.GomenasaiConfig{
		Name:           "Imdb",
		Path:           "Imdb",
		ChunkSizeLimit: 8000,
		IndexPaths:     []string{"$.primaryName"},
	})

	if err != nil {
		panic(err)
	}

	jresp := []Imdb{}
	fmt.Println("Reading Dataset")
	rawData, _ := ioutil.ReadFile("bigdata.json")
	fmt.Println("Loading Dataset")
	err = json.Unmarshal(rawData, &jresp)
	if err != nil {
		panic(err)
	}
	maxLimit := 1000000
	iterations := 0
	ids := []string{}
	benchmark(fmt.Sprintf("Inserting %v items\n", maxLimit), func() {
		for i := 0; i <= iterations; i++ {
			for idx, post := range jresp[0:maxLimit] {
				if idx%10000 == 0 {
					fmt.Printf("Inserting Progress %v/%v\n", idx, maxLimit)
				}
				id, err := manager.Insert(post)
				if err != nil {
					log.Printf("Error %v", err)
				}
				ids = append(ids, id)
				//fmt.Println("Inserted:", id)
			}
		}
	})

	manager.FlushSE()

	fmt.Println("Sleeping for 60 seconds.")
	time.Sleep(time.Minute)

	benchmark("Retrieval", func() {
		for _, id := range ids {
			doc, err := manager.Get(id)
			if err != nil {
				log.Printf("Error %v", err)
			}
			djali := Imdb{}
			doc.Export(&djali)
			//fmt.Println(djali.ParentPeer)
		}
	})

	benchmark("Searching", func() {
		docs := manager.Search("charlie")

		log.Println("Search and sort result for 'asa butterfield': ", len(docs.Documents))

		for _, doc := range docs.Documents {
			log.Println(doc.ExportI())
		}
	})

	manager.Close()

	// benchmark("Loading new DB", func() {
	// 	manager, err = gomenasai.Load("testDB")
	// 	if err != nil {
	// 		panic(err)
	// 	}
	// })

	// benchmark("Searching", func() {
	// 	docs := manager.Search("watch").
	// 		Filter(`contains(doc.slug, "rolex")`).
	// 		Filter(`contains(doc.slug, "daytona")`).
	// 		Sort(`x.price.amount < y.price.amount`).
	// 		Limit(10, 500)

	// 	log.Println("Search, limit start-10;count-500 and sort result for 'watch': ", len(docs.Documents))

	// 	for _, doc := range docs.Documents {
	// 		djali := DjaliListing{}
	// 		doc.Export(&djali)
	// 		log.Println(djali.Price, djali.Title)
	// 	}
	// 	// benchmark("Filtering", func() {
	// 	// 	docs.Filter(`contains(doc.slug, "fruit")`).Filter(`contains(doc.slug, "skateboard")`)
	// 	// 	fmt.Println("Filter result for 'fruit' & 'skateboard': ", len(docs.Documents))
	// 	// })
	// 	//
	// 	// benchmark("Exporting to JSON", func() {
	// 	// 	jsonData, _ := docs.ExportJSONArray()
	// 	// 	fmt.Println(string(jsonData)[:100], "...")
	// 	// })
	// })

	manager.Close()

	// func(dir string) error {
	// 	d, err := os.Open(dir)
	// 	if err != nil {
	// 		return err
	// 	}
	// 	defer d.Close()
	// 	names, err := d.Readdirnames(-1)
	// 	if err != nil {
	// 		return err
	// 	}
	// 	for _, name := range names {
	// 		err = os.RemoveAll(filepath.Join(dir, name))
	// 		if err != nil {
	// 			return err
	// 		}
	// 	}
	// 	os.RemoveAll(dir)
	// 	return nil
	// }("imdb")

	printBenchmarkStats()
	fmt.Println(col(100, 230, 90, RGBFront), "Test Complete âœ…", RGBReset)
}
